!!! 5
html(lang="en")
  head
    title Brawl.IO API
    link(rel="shortcut icon", href="favicon.ico")
    != include(bio_inc.api_css)
    script(src="vendor/jquery.min.js")
    script(src="vendor/jquery.snippet/jquery.snippet.min.js")
    link(type="text/css", rel="stylesheet", href="vendor/jquery.snippet/jquery.snippet.min.css")
    script
      $(function() {
        $("pre.code").snippet("javascript", {
          showNum: false
          , transparent: true
          , style: "matlab"
          , clipboard: "vendor/jquery.snippet/ZeroClipboard.swf"
        });
      });
  body
    .header
      .header_contents
        span#title
          a#home(href="/") Brawl.IO
        span#items
          a#home(href="/") Home
          a#api(href="api") API
          a#logout(href="logout") Logout
    .body
      .content
        .section
          h3 Terminology
          span.term Round
          |  Universal unit of time (about one second in replays)
          br
          span.term Tile
          |  Universal unit of distance (about 5 pixels in replays)
          br
          span.term Player
          |  The object you are controlling
        .section_header
          span.numeral 1
          | Moving
        .quote
          .words A journey of a thousand miles begins with a single step.
          .author Lao Tzu
        .section
          .method#move
            .signature move(direction, [options])
            .description Move your player in one of four directions or tell your player to stop moving.
            .param
              span.name direction
              span.description.code "forward" | "backward" | "left" | "right" | "stop"
            .param
              span.name options
            .options
              .option
                .header
                  span.name delay
                  span.type rounds
                  span.default 0
                .description The number of rounds before the move command is executed
              .option
                .header
                  span.name duration
                  span.type rounds
                  span.default undefined
                .description The number of rounds the player will move in this direction. If left undefined (default), the player will move until it is issued another move command. If the direction is "stop", duration has no effect.
              .option
                .header
                  span.name speed
                  span.type tiles per round
                  span.default undefined
                .description The speed at which the player will move, limited by the player's maximum speed. This value may be negative, in which case, the player will move in the opposite direction.
              .option
                .header
                  span.name onStart
                  span.type function(event)
                  span.default undefined
                .description Called when the player begins to perform this movement command.
              .option
                .header
                  span.name onStop
                  span.type function(event)
                  span.default undefined
                .description Called when the player stops this movement command (only called if direction is not "stop" and if a duration is set).
            .examples
              h3 Examples
              .example Moving backward:
                pre.code move("backward");
              .example Moving forward for 5 rounds after a delay of 3 rounds:
                pre.code move("forward", {delay: 3, duration: 5});
              .example Moving forward for 5 rounds after a delay of 3 rounds (equivalent alternative):
                pre.code.
                  move("forward", {delay: 3});

                  //...then stop after 5 rounds:
                  setTimeout(function() {
                    move("stop");
                  }, 5);
          .method#turn
            .signature turn(direction, [options])
            .description Change the direction your player is facing
            .param
              span.name direction
              span.description.code "left" | "right" | "stop"
            .param
              span.name options
            .options
              .option
                .header
                  span.name delay
                  span.type rounds
                  span.default 0
                .description The number of rounds before the turn command is executed
              .option
                .header
                  span.name duration
                  span.type rounds
                  span.default undefined
                .description The number of rounds the player will turn in this direction. If left undefined (default), the player will turn until it is issued another turn command. If the direction is "stop", duration has no effect.
              .option
                .header
                  span.name speed
                  span.type radians per round
                  span.default undefined
                .description The speed at which the player will turn, limited by the player's maximum turning speed. This value may be negative, in which case, the player will turn in the opposite direction.
              .option
                .header
                  span.name onStart
                  span.type function(event)
                  span.default undefined
                .description Called when the player begins to performthis turn command.
              .option
                .header
                  span.name onStop
                  span.type function(event)
                  span.default undefined
                .description Called when the player stops this turn command (only called if direction is not "stop" and if a duration is set).
            .examples
              h3 Examples
              .example Turning counterclockwise (left):
                pre.code turn("left");
              .example Turning clockwise(right) for 5 rounds after a delay of 3 rounds:
                pre.code turn("right", {delay: 3, duration: 5});
              .example Turning clockwise(right) for 5 rounds after a delay of 3 rounds (equivalent alternative):
                pre.code.
                  turn("right", {delay: 3});

                  //...then stop after 5 rounds:
                  setTimeout(function() {
                    turn("stop");
                  }, 5);
        .section_header
          span.numeral 2
          | Attacking
        .quote
          .words The hand which strikes also blocks.
          .author Wing Chun maxim
        .section
          .method#fire
            .signature fire([command], [options])
            .description Fires off a bullet (maximum frequency of once per round)
            .param
              span.name command
              span.description.code "automatic" | "stop"
            .param
              span.name options
            .options
              .option
                .header
                  span.name automatic
                  span.type boolean
                  span.default false
                .description Whether the weapon should continue to fire whenever it's ready, until 
                  span.code fire("stop") 
                  |  is called
              .option
                .header
                  span.name onFire
                  span.type function(event)
                  span.default undefined
                .description Called after the player tries to fire. 
                  span.code event.fired
                  |  is true if the successful and false otherwise.
              .option
                .header
                  span.name onReady
                  span.type function(event)
                  span.default undefined
                .description Called when the weapon is ready to be fired again.
            .examples
              h3 Examples
              .example Fire once:
                pre.code fire();
              .example Fire on automatic for 10 rounds:
                pre.code.
                  fire("automatic");
                  setTimeout(function() {
                    fire("stop");
                  }, 10);
              .example Fire twice manually:
                pre.code.
                  fire({
                    onReady: function(event) {
                        fire();
                      }
                  });
        .section_header
          span.numeral 3
          | Timing
        .quote
          .words When the strike of a hawk breaks the body of its prey, it is because of timing.
          .author Sun Tzu
        .section
          .method#onRound
            .signature onRound(callback, round)
            .description Runs 
              span.code callback
              |  on round 
              span.code round
            .param
              span.name callback
              span.description The function to call back
            .param
              span.name round
              span.description The round to call back on
            .doc 
              | Note: If round has already passed, the callback is called immediately.
            .examples
              h3 Examples
              .example Fire on round 10.5:
                pre.code onRound(function() { fire(); }, 10.5);

          .method#setTimeout
            .signature setTimeout(callback, rounds)
            .description Runs 
              span.code callback
              |  in
              span.code round
              |  rounds
            .param
              span.name callback
              span.description The function to call back
            .param
              span.name rounds
              span.description The number of rounds to call back in
            .returns Returns: 
              span.value
                span.name id
                span.type (int)
              span.description An integer that represents the timeout id
            .doc 
              | Note: Whereas onRound fires on the absolute round, setTimeout fires on a round relative to the current.
            .examples
              h3 Examples
              .example Fire in 2.5 rounds:
                pre.code setTimeout(function() { fire(); }, 2.5);

          .method#clearTimeout
            .signature clearTimeout(id)
            .description Clears a timeout
            .param
              span.name id
              span.description The id of the timeout we are getting rid of
            .doc 
            .examples
              h3 Examples
              .example Set & clear a timeout (so that the callback never fires):
                pre.code.
                  var timeout_id = setTimeout(function() { fire(); }, 2.5);
                  clearTimeout(timeout_id);
            
          .method#setInteval
            .signature setInterval(callback, rounds)
            .description Runs 
              span.code callback
              |  every
              span.code rounds
              |  rounds
            .param
              span.name callback
              span.description The function to call 
            .param
              span.name rounds
              span.description The delay between calls
            .returns
              span.value
                span.name id
                span.type (int)
              span.description An integer that represents the interval id
            .doc setInterval runs callback until the interval is cleared.
            .examples
              h3 Examples
              .example Fire every 2.5 rounds:
                pre.code setInterval(function() { fire(); }, 2.5);

          .method#clearInteval
            .signature clearInterval(id)
            .description Clears an interval
            .param
              span.name id
              span.description The id of the interval being removed
            .examples
              h3 Examples
              .example Fire every 2.5 rounds for 20 rounds:
                pre.code.
                  var id = setInterval(function() { fire(); }, 2.5);
                  clearInterval(id);
        .section_header
          span.numeral 4
          | Sensing
        .quote
          .words ...if you know your enemies and know yourself, you can win a thousand battles without a single loss.
          .author Sun Tzu
        .section
          .method#sense
            .signature sense(callback)
            .description Get information about every object on screen
            .param
              span.name callback
              span.description A function that will be called, with the information passed in as a parameter.
            .doc The callback is passed one parameter, data:
              .param
                span.name data.map
                span.description Map information
                .param_methods
                  .param_method
                    span.name getWidth()
                    span.description Returns the width of the map in tiles
                  .param_method
                    span.name getHeight()
                    span.description Returns the height of the map in tiles
                  .param_method
                    span.name getDimensions()
                    span.description Returns the dimensions of the map in tiles properties: width & height
              .param
                span.name data.players
                span.description A list of players, each of which has the following methods:
                .param_methods
                  .param_method
                    span.name isMe()
                    span.description If the player is me
                  .param_method
                    span.name isOpponent()
                    span.description If the player is my opponent
                  .param_method
                    span.name getLocation()
                    span.description Returns the opponent's location
            .examples
              h3 Examples
              .example Put the map width into a variable:
                pre.code.
                  var width;
                  sense(function(data) {
                    width = data.map.get_width();
                  });
              .example Get the location of your enemy:
                pre.code.
                  var enemy_location;
                  sense(function(data) {
                    for(var i = 0; i<data.players.length; i++) {
                      var player = data.players[i]; 
                      if(player.isOpponent()) {
                        enemy_location = player.get_location();
                      }
                    }
                  });
    .footer
      span.copyright &copy; 2012 Brawl.IO
